/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as DashboardStorageSettingsRouteImport } from './routes/dashboard/storage-settings'
import { Route as DashboardSettingsRouteImport } from './routes/dashboard/settings'
import { Route as DashboardFileManagerRouteImport } from './routes/dashboard/file-manager'
import { Route as DashboardEmailRouteImport } from './routes/dashboard/email'
import { Route as DashboardBrandingRouteImport } from './routes/dashboard/branding'
import { Route as AuthSignupRouteImport } from './routes/auth/signup'
import { Route as AuthSigninRouteImport } from './routes/auth/signin'
import { Route as AuthResetPasswordRouteImport } from './routes/auth/reset-password'
import { Route as AuthPendingRouteImport } from './routes/auth/pending'
import { Route as DashboardUserManagementIndexRouteImport } from './routes/dashboard/user-management/index'
import { Route as DashboardUserManagementUsersRouteImport } from './routes/dashboard/user-management/users'
import { Route as DashboardUserManagementRolesRouteImport } from './routes/dashboard/user-management/roles'
import { Route as DashboardUserManagementPermissionsRouteImport } from './routes/dashboard/user-management/permissions'
import { Route as DashboardUserManagementConsolidatedRouteImport } from './routes/dashboard/user-management/consolidated'
import { ServerRoute as ApiUsersApprovalServerRouteImport } from './routes/api/users-approval'
import { ServerRoute as ApiUsersActionsServerRouteImport } from './routes/api.users-actions'
import { ServerRoute as ApiUsersServerRouteImport } from './routes/api.users'
import { ServerRoute as ApiTestServerRouteImport } from './routes/api.test'
import { ServerRoute as ApiStorageSettingsServerRouteImport } from './routes/api.storage-settings'
import { ServerRoute as ApiRolesServerRouteImport } from './routes/api.roles'
import { ServerRoute as ApiMyPermissionsServerRouteImport } from './routes/api.my-permissions'
import { ServerRoute as ApiFilesServerRouteImport } from './routes/api/files'
import { ServerRoute as ApiEmailServerRouteImport } from './routes/api.email'
import { ServerRoute as ApiCredentialsServerRouteImport } from './routes/api/credentials'
import { ServerRoute as ApiBrandingServerRouteImport } from './routes/api.branding'
import { ServerRoute as ApiAuthSettingsServerRouteImport } from './routes/api/auth-settings'
import { ServerRoute as ApiUsersUserIdServerRouteImport } from './routes/api.users.$userId'
import { ServerRoute as ApiRolesRoleIdServerRouteImport } from './routes/api.roles.$roleId'
import { ServerRoute as ApiEmailTestServerRouteImport } from './routes/api/email/test'
import { ServerRoute as ApiEmailTemplatesServerRouteImport } from './routes/api/email/templates'
import { ServerRoute as ApiEmailSettingsServerRouteImport } from './routes/api/email/settings'
import { ServerRoute as ApiEmailLogsServerRouteImport } from './routes/api/email/logs'
import { ServerRoute as ApiEmailFragmentsServerRouteImport } from './routes/api/email/fragments'
import { ServerRoute as ApiAuthSignupPostHookServerRouteImport } from './routes/api/auth/signup-post-hook'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api.auth.$'
import { ServerRoute as ApiAuthSettingsFlagServerRouteImport } from './routes/api/auth-settings.flag'
import { ServerRoute as ApiEmailTemplatesSeedApprovalServerRouteImport } from './routes/api/email/templates.seed-approval'
import { ServerRoute as ApiEmailTemplatesPreviewServerRouteImport } from './routes/api/email/templates.preview'
import { ServerRoute as ApiEmailFragmentsDefaultServerRouteImport } from './routes/api/email/fragments.default'

const rootServerRouteImport = createServerRootRoute()

const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardStorageSettingsRoute =
  DashboardStorageSettingsRouteImport.update({
    id: '/storage-settings',
    path: '/storage-settings',
    getParentRoute: () => DashboardRoute,
  } as any)
const DashboardSettingsRoute = DashboardSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardFileManagerRoute = DashboardFileManagerRouteImport.update({
  id: '/file-manager',
  path: '/file-manager',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardEmailRoute = DashboardEmailRouteImport.update({
  id: '/email',
  path: '/email',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardBrandingRoute = DashboardBrandingRouteImport.update({
  id: '/branding',
  path: '/branding',
  getParentRoute: () => DashboardRoute,
} as any)
const AuthSignupRoute = AuthSignupRouteImport.update({
  id: '/auth/signup',
  path: '/auth/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSigninRoute = AuthSigninRouteImport.update({
  id: '/auth/signin',
  path: '/auth/signin',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthResetPasswordRoute = AuthResetPasswordRouteImport.update({
  id: '/auth/reset-password',
  path: '/auth/reset-password',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthPendingRoute = AuthPendingRouteImport.update({
  id: '/auth/pending',
  path: '/auth/pending',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardUserManagementIndexRoute =
  DashboardUserManagementIndexRouteImport.update({
    id: '/user-management/',
    path: '/user-management/',
    getParentRoute: () => DashboardRoute,
  } as any)
const DashboardUserManagementUsersRoute =
  DashboardUserManagementUsersRouteImport.update({
    id: '/user-management/users',
    path: '/user-management/users',
    getParentRoute: () => DashboardRoute,
  } as any)
const DashboardUserManagementRolesRoute =
  DashboardUserManagementRolesRouteImport.update({
    id: '/user-management/roles',
    path: '/user-management/roles',
    getParentRoute: () => DashboardRoute,
  } as any)
const DashboardUserManagementPermissionsRoute =
  DashboardUserManagementPermissionsRouteImport.update({
    id: '/user-management/permissions',
    path: '/user-management/permissions',
    getParentRoute: () => DashboardRoute,
  } as any)
const DashboardUserManagementConsolidatedRoute =
  DashboardUserManagementConsolidatedRouteImport.update({
    id: '/user-management/consolidated',
    path: '/user-management/consolidated',
    getParentRoute: () => DashboardRoute,
  } as any)
const ApiUsersApprovalServerRoute = ApiUsersApprovalServerRouteImport.update({
  id: '/api/users-approval',
  path: '/api/users-approval',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiUsersActionsServerRoute = ApiUsersActionsServerRouteImport.update({
  id: '/api/users-actions',
  path: '/api/users-actions',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiUsersServerRoute = ApiUsersServerRouteImport.update({
  id: '/api/users',
  path: '/api/users',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiTestServerRoute = ApiTestServerRouteImport.update({
  id: '/api/test',
  path: '/api/test',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiStorageSettingsServerRoute =
  ApiStorageSettingsServerRouteImport.update({
    id: '/api/storage-settings',
    path: '/api/storage-settings',
    getParentRoute: () => rootServerRouteImport,
  } as any)
const ApiRolesServerRoute = ApiRolesServerRouteImport.update({
  id: '/api/roles',
  path: '/api/roles',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiMyPermissionsServerRoute = ApiMyPermissionsServerRouteImport.update({
  id: '/api/my-permissions',
  path: '/api/my-permissions',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiFilesServerRoute = ApiFilesServerRouteImport.update({
  id: '/api/files',
  path: '/api/files',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiEmailServerRoute = ApiEmailServerRouteImport.update({
  id: '/api/email',
  path: '/api/email',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiCredentialsServerRoute = ApiCredentialsServerRouteImport.update({
  id: '/api/credentials',
  path: '/api/credentials',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiBrandingServerRoute = ApiBrandingServerRouteImport.update({
  id: '/api/branding',
  path: '/api/branding',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthSettingsServerRoute = ApiAuthSettingsServerRouteImport.update({
  id: '/api/auth-settings',
  path: '/api/auth-settings',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiUsersUserIdServerRoute = ApiUsersUserIdServerRouteImport.update({
  id: '/$userId',
  path: '/$userId',
  getParentRoute: () => ApiUsersServerRoute,
} as any)
const ApiRolesRoleIdServerRoute = ApiRolesRoleIdServerRouteImport.update({
  id: '/$roleId',
  path: '/$roleId',
  getParentRoute: () => ApiRolesServerRoute,
} as any)
const ApiEmailTestServerRoute = ApiEmailTestServerRouteImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => ApiEmailServerRoute,
} as any)
const ApiEmailTemplatesServerRoute = ApiEmailTemplatesServerRouteImport.update({
  id: '/templates',
  path: '/templates',
  getParentRoute: () => ApiEmailServerRoute,
} as any)
const ApiEmailSettingsServerRoute = ApiEmailSettingsServerRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => ApiEmailServerRoute,
} as any)
const ApiEmailLogsServerRoute = ApiEmailLogsServerRouteImport.update({
  id: '/logs',
  path: '/logs',
  getParentRoute: () => ApiEmailServerRoute,
} as any)
const ApiEmailFragmentsServerRoute = ApiEmailFragmentsServerRouteImport.update({
  id: '/fragments',
  path: '/fragments',
  getParentRoute: () => ApiEmailServerRoute,
} as any)
const ApiAuthSignupPostHookServerRoute =
  ApiAuthSignupPostHookServerRouteImport.update({
    id: '/api/auth/signup-post-hook',
    path: '/api/auth/signup-post-hook',
    getParentRoute: () => rootServerRouteImport,
  } as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthSettingsFlagServerRoute =
  ApiAuthSettingsFlagServerRouteImport.update({
    id: '/flag',
    path: '/flag',
    getParentRoute: () => ApiAuthSettingsServerRoute,
  } as any)
const ApiEmailTemplatesSeedApprovalServerRoute =
  ApiEmailTemplatesSeedApprovalServerRouteImport.update({
    id: '/seed-approval',
    path: '/seed-approval',
    getParentRoute: () => ApiEmailTemplatesServerRoute,
  } as any)
const ApiEmailTemplatesPreviewServerRoute =
  ApiEmailTemplatesPreviewServerRouteImport.update({
    id: '/preview',
    path: '/preview',
    getParentRoute: () => ApiEmailTemplatesServerRoute,
  } as any)
const ApiEmailFragmentsDefaultServerRoute =
  ApiEmailFragmentsDefaultServerRouteImport.update({
    id: '/default',
    path: '/default',
    getParentRoute: () => ApiEmailFragmentsServerRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/auth/pending': typeof AuthPendingRoute
  '/auth/reset-password': typeof AuthResetPasswordRoute
  '/auth/signin': typeof AuthSigninRoute
  '/auth/signup': typeof AuthSignupRoute
  '/dashboard/branding': typeof DashboardBrandingRoute
  '/dashboard/email': typeof DashboardEmailRoute
  '/dashboard/file-manager': typeof DashboardFileManagerRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard/storage-settings': typeof DashboardStorageSettingsRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/user-management/consolidated': typeof DashboardUserManagementConsolidatedRoute
  '/dashboard/user-management/permissions': typeof DashboardUserManagementPermissionsRoute
  '/dashboard/user-management/roles': typeof DashboardUserManagementRolesRoute
  '/dashboard/user-management/users': typeof DashboardUserManagementUsersRoute
  '/dashboard/user-management': typeof DashboardUserManagementIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/auth/pending': typeof AuthPendingRoute
  '/auth/reset-password': typeof AuthResetPasswordRoute
  '/auth/signin': typeof AuthSigninRoute
  '/auth/signup': typeof AuthSignupRoute
  '/dashboard/branding': typeof DashboardBrandingRoute
  '/dashboard/email': typeof DashboardEmailRoute
  '/dashboard/file-manager': typeof DashboardFileManagerRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard/storage-settings': typeof DashboardStorageSettingsRoute
  '/dashboard': typeof DashboardIndexRoute
  '/dashboard/user-management/consolidated': typeof DashboardUserManagementConsolidatedRoute
  '/dashboard/user-management/permissions': typeof DashboardUserManagementPermissionsRoute
  '/dashboard/user-management/roles': typeof DashboardUserManagementRolesRoute
  '/dashboard/user-management/users': typeof DashboardUserManagementUsersRoute
  '/dashboard/user-management': typeof DashboardUserManagementIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/auth/pending': typeof AuthPendingRoute
  '/auth/reset-password': typeof AuthResetPasswordRoute
  '/auth/signin': typeof AuthSigninRoute
  '/auth/signup': typeof AuthSignupRoute
  '/dashboard/branding': typeof DashboardBrandingRoute
  '/dashboard/email': typeof DashboardEmailRoute
  '/dashboard/file-manager': typeof DashboardFileManagerRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard/storage-settings': typeof DashboardStorageSettingsRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/user-management/consolidated': typeof DashboardUserManagementConsolidatedRoute
  '/dashboard/user-management/permissions': typeof DashboardUserManagementPermissionsRoute
  '/dashboard/user-management/roles': typeof DashboardUserManagementRolesRoute
  '/dashboard/user-management/users': typeof DashboardUserManagementUsersRoute
  '/dashboard/user-management/': typeof DashboardUserManagementIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/dashboard'
    | '/auth/pending'
    | '/auth/reset-password'
    | '/auth/signin'
    | '/auth/signup'
    | '/dashboard/branding'
    | '/dashboard/email'
    | '/dashboard/file-manager'
    | '/dashboard/settings'
    | '/dashboard/storage-settings'
    | '/dashboard/'
    | '/dashboard/user-management/consolidated'
    | '/dashboard/user-management/permissions'
    | '/dashboard/user-management/roles'
    | '/dashboard/user-management/users'
    | '/dashboard/user-management'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/auth/pending'
    | '/auth/reset-password'
    | '/auth/signin'
    | '/auth/signup'
    | '/dashboard/branding'
    | '/dashboard/email'
    | '/dashboard/file-manager'
    | '/dashboard/settings'
    | '/dashboard/storage-settings'
    | '/dashboard'
    | '/dashboard/user-management/consolidated'
    | '/dashboard/user-management/permissions'
    | '/dashboard/user-management/roles'
    | '/dashboard/user-management/users'
    | '/dashboard/user-management'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/dashboard'
    | '/auth/pending'
    | '/auth/reset-password'
    | '/auth/signin'
    | '/auth/signup'
    | '/dashboard/branding'
    | '/dashboard/email'
    | '/dashboard/file-manager'
    | '/dashboard/settings'
    | '/dashboard/storage-settings'
    | '/dashboard/'
    | '/dashboard/user-management/consolidated'
    | '/dashboard/user-management/permissions'
    | '/dashboard/user-management/roles'
    | '/dashboard/user-management/users'
    | '/dashboard/user-management/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  AuthPendingRoute: typeof AuthPendingRoute
  AuthResetPasswordRoute: typeof AuthResetPasswordRoute
  AuthSigninRoute: typeof AuthSigninRoute
  AuthSignupRoute: typeof AuthSignupRoute
}
export interface FileServerRoutesByFullPath {
  '/api/auth-settings': typeof ApiAuthSettingsServerRouteWithChildren
  '/api/branding': typeof ApiBrandingServerRoute
  '/api/credentials': typeof ApiCredentialsServerRoute
  '/api/email': typeof ApiEmailServerRouteWithChildren
  '/api/files': typeof ApiFilesServerRoute
  '/api/my-permissions': typeof ApiMyPermissionsServerRoute
  '/api/roles': typeof ApiRolesServerRouteWithChildren
  '/api/storage-settings': typeof ApiStorageSettingsServerRoute
  '/api/test': typeof ApiTestServerRoute
  '/api/users': typeof ApiUsersServerRouteWithChildren
  '/api/users-actions': typeof ApiUsersActionsServerRoute
  '/api/users-approval': typeof ApiUsersApprovalServerRoute
  '/api/auth-settings/flag': typeof ApiAuthSettingsFlagServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/auth/signup-post-hook': typeof ApiAuthSignupPostHookServerRoute
  '/api/email/fragments': typeof ApiEmailFragmentsServerRouteWithChildren
  '/api/email/logs': typeof ApiEmailLogsServerRoute
  '/api/email/settings': typeof ApiEmailSettingsServerRoute
  '/api/email/templates': typeof ApiEmailTemplatesServerRouteWithChildren
  '/api/email/test': typeof ApiEmailTestServerRoute
  '/api/roles/$roleId': typeof ApiRolesRoleIdServerRoute
  '/api/users/$userId': typeof ApiUsersUserIdServerRoute
  '/api/email/fragments/default': typeof ApiEmailFragmentsDefaultServerRoute
  '/api/email/templates/preview': typeof ApiEmailTemplatesPreviewServerRoute
  '/api/email/templates/seed-approval': typeof ApiEmailTemplatesSeedApprovalServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth-settings': typeof ApiAuthSettingsServerRouteWithChildren
  '/api/branding': typeof ApiBrandingServerRoute
  '/api/credentials': typeof ApiCredentialsServerRoute
  '/api/email': typeof ApiEmailServerRouteWithChildren
  '/api/files': typeof ApiFilesServerRoute
  '/api/my-permissions': typeof ApiMyPermissionsServerRoute
  '/api/roles': typeof ApiRolesServerRouteWithChildren
  '/api/storage-settings': typeof ApiStorageSettingsServerRoute
  '/api/test': typeof ApiTestServerRoute
  '/api/users': typeof ApiUsersServerRouteWithChildren
  '/api/users-actions': typeof ApiUsersActionsServerRoute
  '/api/users-approval': typeof ApiUsersApprovalServerRoute
  '/api/auth-settings/flag': typeof ApiAuthSettingsFlagServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/auth/signup-post-hook': typeof ApiAuthSignupPostHookServerRoute
  '/api/email/fragments': typeof ApiEmailFragmentsServerRouteWithChildren
  '/api/email/logs': typeof ApiEmailLogsServerRoute
  '/api/email/settings': typeof ApiEmailSettingsServerRoute
  '/api/email/templates': typeof ApiEmailTemplatesServerRouteWithChildren
  '/api/email/test': typeof ApiEmailTestServerRoute
  '/api/roles/$roleId': typeof ApiRolesRoleIdServerRoute
  '/api/users/$userId': typeof ApiUsersUserIdServerRoute
  '/api/email/fragments/default': typeof ApiEmailFragmentsDefaultServerRoute
  '/api/email/templates/preview': typeof ApiEmailTemplatesPreviewServerRoute
  '/api/email/templates/seed-approval': typeof ApiEmailTemplatesSeedApprovalServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth-settings': typeof ApiAuthSettingsServerRouteWithChildren
  '/api/branding': typeof ApiBrandingServerRoute
  '/api/credentials': typeof ApiCredentialsServerRoute
  '/api/email': typeof ApiEmailServerRouteWithChildren
  '/api/files': typeof ApiFilesServerRoute
  '/api/my-permissions': typeof ApiMyPermissionsServerRoute
  '/api/roles': typeof ApiRolesServerRouteWithChildren
  '/api/storage-settings': typeof ApiStorageSettingsServerRoute
  '/api/test': typeof ApiTestServerRoute
  '/api/users': typeof ApiUsersServerRouteWithChildren
  '/api/users-actions': typeof ApiUsersActionsServerRoute
  '/api/users-approval': typeof ApiUsersApprovalServerRoute
  '/api/auth-settings/flag': typeof ApiAuthSettingsFlagServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/auth/signup-post-hook': typeof ApiAuthSignupPostHookServerRoute
  '/api/email/fragments': typeof ApiEmailFragmentsServerRouteWithChildren
  '/api/email/logs': typeof ApiEmailLogsServerRoute
  '/api/email/settings': typeof ApiEmailSettingsServerRoute
  '/api/email/templates': typeof ApiEmailTemplatesServerRouteWithChildren
  '/api/email/test': typeof ApiEmailTestServerRoute
  '/api/roles/$roleId': typeof ApiRolesRoleIdServerRoute
  '/api/users/$userId': typeof ApiUsersUserIdServerRoute
  '/api/email/fragments/default': typeof ApiEmailFragmentsDefaultServerRoute
  '/api/email/templates/preview': typeof ApiEmailTemplatesPreviewServerRoute
  '/api/email/templates/seed-approval': typeof ApiEmailTemplatesSeedApprovalServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths:
    | '/api/auth-settings'
    | '/api/branding'
    | '/api/credentials'
    | '/api/email'
    | '/api/files'
    | '/api/my-permissions'
    | '/api/roles'
    | '/api/storage-settings'
    | '/api/test'
    | '/api/users'
    | '/api/users-actions'
    | '/api/users-approval'
    | '/api/auth-settings/flag'
    | '/api/auth/$'
    | '/api/auth/signup-post-hook'
    | '/api/email/fragments'
    | '/api/email/logs'
    | '/api/email/settings'
    | '/api/email/templates'
    | '/api/email/test'
    | '/api/roles/$roleId'
    | '/api/users/$userId'
    | '/api/email/fragments/default'
    | '/api/email/templates/preview'
    | '/api/email/templates/seed-approval'
  fileServerRoutesByTo: FileServerRoutesByTo
  to:
    | '/api/auth-settings'
    | '/api/branding'
    | '/api/credentials'
    | '/api/email'
    | '/api/files'
    | '/api/my-permissions'
    | '/api/roles'
    | '/api/storage-settings'
    | '/api/test'
    | '/api/users'
    | '/api/users-actions'
    | '/api/users-approval'
    | '/api/auth-settings/flag'
    | '/api/auth/$'
    | '/api/auth/signup-post-hook'
    | '/api/email/fragments'
    | '/api/email/logs'
    | '/api/email/settings'
    | '/api/email/templates'
    | '/api/email/test'
    | '/api/roles/$roleId'
    | '/api/users/$userId'
    | '/api/email/fragments/default'
    | '/api/email/templates/preview'
    | '/api/email/templates/seed-approval'
  id:
    | '__root__'
    | '/api/auth-settings'
    | '/api/branding'
    | '/api/credentials'
    | '/api/email'
    | '/api/files'
    | '/api/my-permissions'
    | '/api/roles'
    | '/api/storage-settings'
    | '/api/test'
    | '/api/users'
    | '/api/users-actions'
    | '/api/users-approval'
    | '/api/auth-settings/flag'
    | '/api/auth/$'
    | '/api/auth/signup-post-hook'
    | '/api/email/fragments'
    | '/api/email/logs'
    | '/api/email/settings'
    | '/api/email/templates'
    | '/api/email/test'
    | '/api/roles/$roleId'
    | '/api/users/$userId'
    | '/api/email/fragments/default'
    | '/api/email/templates/preview'
    | '/api/email/templates/seed-approval'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSettingsServerRoute: typeof ApiAuthSettingsServerRouteWithChildren
  ApiBrandingServerRoute: typeof ApiBrandingServerRoute
  ApiCredentialsServerRoute: typeof ApiCredentialsServerRoute
  ApiEmailServerRoute: typeof ApiEmailServerRouteWithChildren
  ApiFilesServerRoute: typeof ApiFilesServerRoute
  ApiMyPermissionsServerRoute: typeof ApiMyPermissionsServerRoute
  ApiRolesServerRoute: typeof ApiRolesServerRouteWithChildren
  ApiStorageSettingsServerRoute: typeof ApiStorageSettingsServerRoute
  ApiTestServerRoute: typeof ApiTestServerRoute
  ApiUsersServerRoute: typeof ApiUsersServerRouteWithChildren
  ApiUsersActionsServerRoute: typeof ApiUsersActionsServerRoute
  ApiUsersApprovalServerRoute: typeof ApiUsersApprovalServerRoute
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
  ApiAuthSignupPostHookServerRoute: typeof ApiAuthSignupPostHookServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/storage-settings': {
      id: '/dashboard/storage-settings'
      path: '/storage-settings'
      fullPath: '/dashboard/storage-settings'
      preLoaderRoute: typeof DashboardStorageSettingsRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/settings': {
      id: '/dashboard/settings'
      path: '/settings'
      fullPath: '/dashboard/settings'
      preLoaderRoute: typeof DashboardSettingsRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/file-manager': {
      id: '/dashboard/file-manager'
      path: '/file-manager'
      fullPath: '/dashboard/file-manager'
      preLoaderRoute: typeof DashboardFileManagerRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/email': {
      id: '/dashboard/email'
      path: '/email'
      fullPath: '/dashboard/email'
      preLoaderRoute: typeof DashboardEmailRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/branding': {
      id: '/dashboard/branding'
      path: '/branding'
      fullPath: '/dashboard/branding'
      preLoaderRoute: typeof DashboardBrandingRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/auth/signup': {
      id: '/auth/signup'
      path: '/auth/signup'
      fullPath: '/auth/signup'
      preLoaderRoute: typeof AuthSignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/signin': {
      id: '/auth/signin'
      path: '/auth/signin'
      fullPath: '/auth/signin'
      preLoaderRoute: typeof AuthSigninRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/reset-password': {
      id: '/auth/reset-password'
      path: '/auth/reset-password'
      fullPath: '/auth/reset-password'
      preLoaderRoute: typeof AuthResetPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/pending': {
      id: '/auth/pending'
      path: '/auth/pending'
      fullPath: '/auth/pending'
      preLoaderRoute: typeof AuthPendingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/user-management/': {
      id: '/dashboard/user-management/'
      path: '/user-management'
      fullPath: '/dashboard/user-management'
      preLoaderRoute: typeof DashboardUserManagementIndexRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/user-management/users': {
      id: '/dashboard/user-management/users'
      path: '/user-management/users'
      fullPath: '/dashboard/user-management/users'
      preLoaderRoute: typeof DashboardUserManagementUsersRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/user-management/roles': {
      id: '/dashboard/user-management/roles'
      path: '/user-management/roles'
      fullPath: '/dashboard/user-management/roles'
      preLoaderRoute: typeof DashboardUserManagementRolesRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/user-management/permissions': {
      id: '/dashboard/user-management/permissions'
      path: '/user-management/permissions'
      fullPath: '/dashboard/user-management/permissions'
      preLoaderRoute: typeof DashboardUserManagementPermissionsRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/user-management/consolidated': {
      id: '/dashboard/user-management/consolidated'
      path: '/user-management/consolidated'
      fullPath: '/dashboard/user-management/consolidated'
      preLoaderRoute: typeof DashboardUserManagementConsolidatedRouteImport
      parentRoute: typeof DashboardRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/users-approval': {
      id: '/api/users-approval'
      path: '/api/users-approval'
      fullPath: '/api/users-approval'
      preLoaderRoute: typeof ApiUsersApprovalServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/users-actions': {
      id: '/api/users-actions'
      path: '/api/users-actions'
      fullPath: '/api/users-actions'
      preLoaderRoute: typeof ApiUsersActionsServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/users': {
      id: '/api/users'
      path: '/api/users'
      fullPath: '/api/users'
      preLoaderRoute: typeof ApiUsersServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/test': {
      id: '/api/test'
      path: '/api/test'
      fullPath: '/api/test'
      preLoaderRoute: typeof ApiTestServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/storage-settings': {
      id: '/api/storage-settings'
      path: '/api/storage-settings'
      fullPath: '/api/storage-settings'
      preLoaderRoute: typeof ApiStorageSettingsServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/roles': {
      id: '/api/roles'
      path: '/api/roles'
      fullPath: '/api/roles'
      preLoaderRoute: typeof ApiRolesServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/my-permissions': {
      id: '/api/my-permissions'
      path: '/api/my-permissions'
      fullPath: '/api/my-permissions'
      preLoaderRoute: typeof ApiMyPermissionsServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/files': {
      id: '/api/files'
      path: '/api/files'
      fullPath: '/api/files'
      preLoaderRoute: typeof ApiFilesServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/email': {
      id: '/api/email'
      path: '/api/email'
      fullPath: '/api/email'
      preLoaderRoute: typeof ApiEmailServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/credentials': {
      id: '/api/credentials'
      path: '/api/credentials'
      fullPath: '/api/credentials'
      preLoaderRoute: typeof ApiCredentialsServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/branding': {
      id: '/api/branding'
      path: '/api/branding'
      fullPath: '/api/branding'
      preLoaderRoute: typeof ApiBrandingServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth-settings': {
      id: '/api/auth-settings'
      path: '/api/auth-settings'
      fullPath: '/api/auth-settings'
      preLoaderRoute: typeof ApiAuthSettingsServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/users/$userId': {
      id: '/api/users/$userId'
      path: '/$userId'
      fullPath: '/api/users/$userId'
      preLoaderRoute: typeof ApiUsersUserIdServerRouteImport
      parentRoute: typeof ApiUsersServerRoute
    }
    '/api/roles/$roleId': {
      id: '/api/roles/$roleId'
      path: '/$roleId'
      fullPath: '/api/roles/$roleId'
      preLoaderRoute: typeof ApiRolesRoleIdServerRouteImport
      parentRoute: typeof ApiRolesServerRoute
    }
    '/api/email/test': {
      id: '/api/email/test'
      path: '/test'
      fullPath: '/api/email/test'
      preLoaderRoute: typeof ApiEmailTestServerRouteImport
      parentRoute: typeof ApiEmailServerRoute
    }
    '/api/email/templates': {
      id: '/api/email/templates'
      path: '/templates'
      fullPath: '/api/email/templates'
      preLoaderRoute: typeof ApiEmailTemplatesServerRouteImport
      parentRoute: typeof ApiEmailServerRoute
    }
    '/api/email/settings': {
      id: '/api/email/settings'
      path: '/settings'
      fullPath: '/api/email/settings'
      preLoaderRoute: typeof ApiEmailSettingsServerRouteImport
      parentRoute: typeof ApiEmailServerRoute
    }
    '/api/email/logs': {
      id: '/api/email/logs'
      path: '/logs'
      fullPath: '/api/email/logs'
      preLoaderRoute: typeof ApiEmailLogsServerRouteImport
      parentRoute: typeof ApiEmailServerRoute
    }
    '/api/email/fragments': {
      id: '/api/email/fragments'
      path: '/fragments'
      fullPath: '/api/email/fragments'
      preLoaderRoute: typeof ApiEmailFragmentsServerRouteImport
      parentRoute: typeof ApiEmailServerRoute
    }
    '/api/auth/signup-post-hook': {
      id: '/api/auth/signup-post-hook'
      path: '/api/auth/signup-post-hook'
      fullPath: '/api/auth/signup-post-hook'
      preLoaderRoute: typeof ApiAuthSignupPostHookServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth-settings/flag': {
      id: '/api/auth-settings/flag'
      path: '/flag'
      fullPath: '/api/auth-settings/flag'
      preLoaderRoute: typeof ApiAuthSettingsFlagServerRouteImport
      parentRoute: typeof ApiAuthSettingsServerRoute
    }
    '/api/email/templates/seed-approval': {
      id: '/api/email/templates/seed-approval'
      path: '/seed-approval'
      fullPath: '/api/email/templates/seed-approval'
      preLoaderRoute: typeof ApiEmailTemplatesSeedApprovalServerRouteImport
      parentRoute: typeof ApiEmailTemplatesServerRoute
    }
    '/api/email/templates/preview': {
      id: '/api/email/templates/preview'
      path: '/preview'
      fullPath: '/api/email/templates/preview'
      preLoaderRoute: typeof ApiEmailTemplatesPreviewServerRouteImport
      parentRoute: typeof ApiEmailTemplatesServerRoute
    }
    '/api/email/fragments/default': {
      id: '/api/email/fragments/default'
      path: '/default'
      fullPath: '/api/email/fragments/default'
      preLoaderRoute: typeof ApiEmailFragmentsDefaultServerRouteImport
      parentRoute: typeof ApiEmailFragmentsServerRoute
    }
  }
}

interface DashboardRouteChildren {
  DashboardBrandingRoute: typeof DashboardBrandingRoute
  DashboardEmailRoute: typeof DashboardEmailRoute
  DashboardFileManagerRoute: typeof DashboardFileManagerRoute
  DashboardSettingsRoute: typeof DashboardSettingsRoute
  DashboardStorageSettingsRoute: typeof DashboardStorageSettingsRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
  DashboardUserManagementConsolidatedRoute: typeof DashboardUserManagementConsolidatedRoute
  DashboardUserManagementPermissionsRoute: typeof DashboardUserManagementPermissionsRoute
  DashboardUserManagementRolesRoute: typeof DashboardUserManagementRolesRoute
  DashboardUserManagementUsersRoute: typeof DashboardUserManagementUsersRoute
  DashboardUserManagementIndexRoute: typeof DashboardUserManagementIndexRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardBrandingRoute: DashboardBrandingRoute,
  DashboardEmailRoute: DashboardEmailRoute,
  DashboardFileManagerRoute: DashboardFileManagerRoute,
  DashboardSettingsRoute: DashboardSettingsRoute,
  DashboardStorageSettingsRoute: DashboardStorageSettingsRoute,
  DashboardIndexRoute: DashboardIndexRoute,
  DashboardUserManagementConsolidatedRoute:
    DashboardUserManagementConsolidatedRoute,
  DashboardUserManagementPermissionsRoute:
    DashboardUserManagementPermissionsRoute,
  DashboardUserManagementRolesRoute: DashboardUserManagementRolesRoute,
  DashboardUserManagementUsersRoute: DashboardUserManagementUsersRoute,
  DashboardUserManagementIndexRoute: DashboardUserManagementIndexRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

interface ApiAuthSettingsServerRouteChildren {
  ApiAuthSettingsFlagServerRoute: typeof ApiAuthSettingsFlagServerRoute
}

const ApiAuthSettingsServerRouteChildren: ApiAuthSettingsServerRouteChildren = {
  ApiAuthSettingsFlagServerRoute: ApiAuthSettingsFlagServerRoute,
}

const ApiAuthSettingsServerRouteWithChildren =
  ApiAuthSettingsServerRoute._addFileChildren(
    ApiAuthSettingsServerRouteChildren,
  )

interface ApiEmailFragmentsServerRouteChildren {
  ApiEmailFragmentsDefaultServerRoute: typeof ApiEmailFragmentsDefaultServerRoute
}

const ApiEmailFragmentsServerRouteChildren: ApiEmailFragmentsServerRouteChildren =
  {
    ApiEmailFragmentsDefaultServerRoute: ApiEmailFragmentsDefaultServerRoute,
  }

const ApiEmailFragmentsServerRouteWithChildren =
  ApiEmailFragmentsServerRoute._addFileChildren(
    ApiEmailFragmentsServerRouteChildren,
  )

interface ApiEmailTemplatesServerRouteChildren {
  ApiEmailTemplatesPreviewServerRoute: typeof ApiEmailTemplatesPreviewServerRoute
  ApiEmailTemplatesSeedApprovalServerRoute: typeof ApiEmailTemplatesSeedApprovalServerRoute
}

const ApiEmailTemplatesServerRouteChildren: ApiEmailTemplatesServerRouteChildren =
  {
    ApiEmailTemplatesPreviewServerRoute: ApiEmailTemplatesPreviewServerRoute,
    ApiEmailTemplatesSeedApprovalServerRoute:
      ApiEmailTemplatesSeedApprovalServerRoute,
  }

const ApiEmailTemplatesServerRouteWithChildren =
  ApiEmailTemplatesServerRoute._addFileChildren(
    ApiEmailTemplatesServerRouteChildren,
  )

interface ApiEmailServerRouteChildren {
  ApiEmailFragmentsServerRoute: typeof ApiEmailFragmentsServerRouteWithChildren
  ApiEmailLogsServerRoute: typeof ApiEmailLogsServerRoute
  ApiEmailSettingsServerRoute: typeof ApiEmailSettingsServerRoute
  ApiEmailTemplatesServerRoute: typeof ApiEmailTemplatesServerRouteWithChildren
  ApiEmailTestServerRoute: typeof ApiEmailTestServerRoute
}

const ApiEmailServerRouteChildren: ApiEmailServerRouteChildren = {
  ApiEmailFragmentsServerRoute: ApiEmailFragmentsServerRouteWithChildren,
  ApiEmailLogsServerRoute: ApiEmailLogsServerRoute,
  ApiEmailSettingsServerRoute: ApiEmailSettingsServerRoute,
  ApiEmailTemplatesServerRoute: ApiEmailTemplatesServerRouteWithChildren,
  ApiEmailTestServerRoute: ApiEmailTestServerRoute,
}

const ApiEmailServerRouteWithChildren = ApiEmailServerRoute._addFileChildren(
  ApiEmailServerRouteChildren,
)

interface ApiRolesServerRouteChildren {
  ApiRolesRoleIdServerRoute: typeof ApiRolesRoleIdServerRoute
}

const ApiRolesServerRouteChildren: ApiRolesServerRouteChildren = {
  ApiRolesRoleIdServerRoute: ApiRolesRoleIdServerRoute,
}

const ApiRolesServerRouteWithChildren = ApiRolesServerRoute._addFileChildren(
  ApiRolesServerRouteChildren,
)

interface ApiUsersServerRouteChildren {
  ApiUsersUserIdServerRoute: typeof ApiUsersUserIdServerRoute
}

const ApiUsersServerRouteChildren: ApiUsersServerRouteChildren = {
  ApiUsersUserIdServerRoute: ApiUsersUserIdServerRoute,
}

const ApiUsersServerRouteWithChildren = ApiUsersServerRoute._addFileChildren(
  ApiUsersServerRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRoute,
  DashboardRoute: DashboardRouteWithChildren,
  AuthPendingRoute: AuthPendingRoute,
  AuthResetPasswordRoute: AuthResetPasswordRoute,
  AuthSigninRoute: AuthSigninRoute,
  AuthSignupRoute: AuthSignupRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSettingsServerRoute: ApiAuthSettingsServerRouteWithChildren,
  ApiBrandingServerRoute: ApiBrandingServerRoute,
  ApiCredentialsServerRoute: ApiCredentialsServerRoute,
  ApiEmailServerRoute: ApiEmailServerRouteWithChildren,
  ApiFilesServerRoute: ApiFilesServerRoute,
  ApiMyPermissionsServerRoute: ApiMyPermissionsServerRoute,
  ApiRolesServerRoute: ApiRolesServerRouteWithChildren,
  ApiStorageSettingsServerRoute: ApiStorageSettingsServerRoute,
  ApiTestServerRoute: ApiTestServerRoute,
  ApiUsersServerRoute: ApiUsersServerRouteWithChildren,
  ApiUsersActionsServerRoute: ApiUsersActionsServerRoute,
  ApiUsersApprovalServerRoute: ApiUsersApprovalServerRoute,
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
  ApiAuthSignupPostHookServerRoute: ApiAuthSignupPostHookServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
