/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardBrandingRouteImport } from './routes/dashboard/branding'
import { Route as DashboardEmailRouteImport } from './routes/dashboard/email'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as AuthSignupRouteImport } from './routes/auth/signup'
import { Route as AuthSigninRouteImport } from './routes/auth/signin'
import { Route as AuthResetPasswordRouteImport } from './routes/auth/reset-password'
import { Route as DashboardUserManagementUsersRouteImport } from './routes/dashboard/user-management/users'
import { Route as DashboardUserManagementRolesRouteImport } from './routes/dashboard/user-management/roles'
import { Route as DashboardUserManagementPermissionsRouteImport } from './routes/dashboard/user-management/permissions'
import { ServerRoute as ApiUsersServerRouteImport } from './routes/api.users'
import { ServerRoute as ApiRolesServerRouteImport } from './routes/api.roles'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api.auth.$'
import { ServerRoute as ApiBrandingServerRouteImport } from './routes/api.branding'
import { ServerRoute as ApiTestServerRouteImport } from './routes/api.test'

const rootServerRouteImport = createServerRootRoute()

const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardBrandingRoute = DashboardBrandingRouteImport.update({
  id: '/branding',
  path: '/branding',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardEmailRoute = DashboardEmailRouteImport.update({
  id: '/email',
  path: '/email',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)
const AuthSignupRoute = AuthSignupRouteImport.update({
  id: '/auth/signup',
  path: '/auth/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSigninRoute = AuthSigninRouteImport.update({
  id: '/auth/signin',
  path: '/auth/signin',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthResetPasswordRoute = AuthResetPasswordRouteImport.update({
  id: '/auth/reset-password',
  path: '/auth/reset-password',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardUserManagementUsersRoute =
  DashboardUserManagementUsersRouteImport.update({
    id: '/user-management/users',
    path: '/user-management/users',
    getParentRoute: () => DashboardRoute,
  } as any)
const DashboardUserManagementRolesRoute =
  DashboardUserManagementRolesRouteImport.update({
    id: '/user-management/roles',
    path: '/user-management/roles',
    getParentRoute: () => DashboardRoute,
  } as any)
const DashboardUserManagementPermissionsRoute =
  DashboardUserManagementPermissionsRouteImport.update({
    id: '/user-management/permissions',
    path: '/user-management/permissions',
    getParentRoute: () => DashboardRoute,
  } as any)
const ApiUsersServerRoute = ApiUsersServerRouteImport.update({
  id: '/api/users',
  path: '/api/users',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiRolesServerRoute = ApiRolesServerRouteImport.update({
  id: '/api/roles',
  path: '/api/roles',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiBrandingServerRoute = ApiBrandingServerRouteImport.update({
  id: '/api/branding',
  path: '/api/branding',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiTestServerRoute = ApiTestServerRouteImport.update({
  id: '/api/test',
  path: '/api/test',
  getParentRoute: () => rootServerRouteImport,
} as any)

const DashboardRouteWithChildren = DashboardRoute._addFileChildren({
  DashboardIndexRoute,
  DashboardBrandingRoute,
  DashboardEmailRoute,
  DashboardUserManagementUsersRoute,
  DashboardUserManagementRolesRoute,
  DashboardUserManagementPermissionsRoute,
})

const rootRouteWithChildren = rootRouteImport._addFileChildren({
  IndexRoute,
  AdminRoute,
  DashboardRoute: DashboardRouteWithChildren,
  AuthResetPasswordRoute,
  AuthSigninRoute,
  AuthSignupRoute,
})

const rootServerRouteWithChildren = rootServerRouteImport._addFileChildren({
  ApiUsersServerRoute,
  ApiRolesServerRoute,
  ApiAuthSplatServerRoute,
  ApiBrandingServerRoute,
  ApiTestServerRoute,
})

export const routeTree = rootRouteWithChildren
export const serverRouteTree = rootServerRouteWithChildren

export interface FileRouteTypes {
  fileRoutesByFullPath: any
  fullPaths: any
  fileRoutesByTo: any
  to: any
  id: any
}

declare module '@tanstack/react-router' {
  interface FileRoutesByFullPath {
    '/': any
    '/admin': any
    '/dashboard': any
    '/auth/reset-password': any
    '/auth/signin': any
    '/auth/signup': any
    '/dashboard/': any
    '/dashboard/branding': any
    '/dashboard/email': any
    '/dashboard/user-management/permissions': any
    '/dashboard/user-management/roles': any
    '/dashboard/user-management/users': any
  }

  interface FileServerRoutesByFullPath {
    '/api/users': any
    '/api/roles': any
    '/api/auth/$': any
    '/api/branding': any
    '/api/test': any
  }
}
